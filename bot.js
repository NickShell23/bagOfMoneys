const TelegramBot = require('node-telegram-bot-api'); // –ø–æ–¥–∫–ª—é—á–∞–µ–º node-telegram-bot-api
const CoinGecko = require('coingecko-api');
const token = '5031403115:AAG_U9kyBjyfw_M7Y0jgtrcaWC8TlURyuQU'; // —Ç—É—Ç —Ç–æ–∫–µ–Ω –∫—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç botFather
const axios = require('axios');



const config = require("./db/config/db.config.js");

// const app = express();
// app.use(bodyParser.json());
// app.use(express.json());

const Sequelize = require("sequelize");
const sequelize = new Sequelize(
    config.DB,
    config.USER,
    config.PASSWORD, {
        host: config.HOST,
        dialect: config.dialect,
        operatorsAliases: false,

        pool: {
            max: config.pool.max,
            min: config.pool.min,
            acquire: config.pool.acquire,
            idle: config.pool.idle
        }
    }
);

const db = require("./db/models");
const User = db.users;

// db.sequelize.sync({ force: true }).then(async () => {
//     console.log('Drop and Resync Db');
//      initial();
// });

// Initial DB informations
async function initial() {

    USERS
    User.create({
        "tg_id": "123456",
        "tg_userName": "@qweqwe",
        "first_name": "asdasd",
        "last_name": "zxczxc",
        "balance": "90",
    });
    User.create({
        "tg_id": "598357235",
        "tg_userName": "@Khada",
        "first_name": "qweqwe",
        "last_name": "asdasd",
        "balance": "322",
    });
    User.create({
      "tg_id": "234567",
      "tg_userName": "@fghfgh",
      "first_name": "xmnxmn'",
      "last_name": "fghgfh",
      "balance": "228",
  });


}





// –≤–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –æ–±–æ—Ç–∞
const bot = new TelegramBot(token, {polling: true});
  var _coinList = {};
var usduah = null;
var summ1 = null;
    var card = null;
//crypto prices
const CoinGeckoClient = new CoinGecko();
  var getCrypto = async() =>{
       let data = await CoinGeckoClient.exchanges.fetchTickers('bitfinex', {
        coin_ids: ['litecoin','ripple','dogecoin','monero']
    });
    var _datacc = data.data.tickers.filter(t => t.target == 'USD');
    [
        'LTC',
        'XRP',
        'DOGE',
        'XMR',
    ].forEach((i) => {
        var _temp = _datacc.filter(t => t.base == i);
        var _res = _temp.length == 0 ? [] : _temp[0];
        _coinList[i] = _res.last;
    })
console.log(_coinList);
      console.log(_coinList.LTC);
  };
var getUAH = async() =>{
    axios.get(`https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11`)
.then(res=>{
        console.log(res.data);
    console.log(res.data[0].buy);
    console.log(res.data[0].sale);
        console.log(res.data[0].ccy)
        console.log(res.data[0].buy + res.data[0].sale);
        console.log(usduah);
        var i;
        if(res.data[1].ccy === 'USD')
            i=1;
        else if(res.data[0].ccy === 'USD')
            i=0;
         else if(res.data[2].ccy === 'USD')
            i=2;
        console.log(i);
usduah = (parseFloat(res.data[i].buy) + parseFloat(res.data[i].sale))/2;
        console.log(usduah);
        
  })  
  .catch(error=>{

  });
};
const keyboard1 = [
    [
      {
        text: '–û–±–º–µ–Ω', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'obmen' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      },
      {
        text: '–í—ã–≤–æ–¥', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'vyvod' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ]
  ];
const backkey = [
    [
      {
        text: '–ù–∞–∑–∞–¥', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'back' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ]
  ];
const backkey1 = [
    [
      {
        text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'back' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ]
  ];
const card1 = [
    [
      {
        text: '–î–∞–ª–µ–µ', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'card' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ]
  ];
const keyboard2 = [
    [
      {
        text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å LTC', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'ltc' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      },
      {
        text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å XRP', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'xrp' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ],
    [
      {
        text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å DOGE', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'doge' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      },
      {
        text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å XMR', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'xmr' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ],
    [
        {
            text: '–ù–∞–∑–∞–¥', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'back' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
        }
    ]
  ];

var balance = 0;
var f_name;
var status = 0;

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
     const startTextSplited = msg.text.split(" ");
        startWord = startTextSplited[0];

        if(startWord == "/start"){
            return;}
    
    if(status === 0 ){
         bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey
                                        }
                                    });
    }
    if(status === 1){
          let txt1;
            var summ = msg.text;
            if(/[^0-9]/.test(summ))
                {
                    txt1 ='–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
                    bot.sendMessage(chatId, txt1, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey
                                        }
                                    });
                }
            else{
                summ1 = parseInt(summ);
                if(summ1 > balance){
                    txt1 = '–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                    bot.sendMessage(chatId, txt1, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey
                                        }
                                    });
                }
                else if(1200 > balance){
                    txt1 = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1200–≥—Ä–Ω';
                    bot.sendMessage(chatId, txt1, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey
                                        }
                                    });
                }
                else{
                    
                    txt1 = '–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: ' + summ1;
                    bot.sendMessage(chatId, txt1, {
                        reply_markup: {
                            inline_keyboard: card1
                        }
                    });
                
            }
            
}
        
    }
    if(status === 2){
                 card = msg.text;
                        
                        if(/[^0-9]/.test(card)){
                                txt1 ='–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
                                  bot.sendMessage(chatId, txt1, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey
                                        }
                                    });
                            }
                        else {
                            if(card.length != 16) {
                                txt1 ='–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
                                bot.sendMessage(chatId, txt1, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey
                                        }
                                    });
                                }
                            else{
                                txt1 ='–ó–∞—è–≤–∫–∞ #'+ chatId + ' —Å–æ–∑–¥–∞–Ω–∞\nC—É–º–º–∞: ' + summ1 + '\n –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ' + card ;
                                balance = balance - summ1;
                                bot.sendMessage(chatId, txt1, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
                                        reply_markup: {
                                            inline_keyboard: backkey1
                                        }
                                    });
                                }
                            }
                    }
    
});
            

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
    const first_name = msg.chat.first_name; //–ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º —á—Ç–æ-—Ç–æ –ø—Ä–∏—Å–ª–∞–ª
    const last_name = msg.chat.last_name; 
    const tg_userName = msg.chat.username; 
    f_name = first_name;
    balance = 0;

    const objTg_id = Object.assign({"tg_id": chatId});

    User.findOne({where: objTg_id}).then(id => {
        if(!id)
        {
            User.create({
                "tg_id": chatId,
                "tg_userName": `@${tg_userName}`,
                "first_name": first_name,
                "last_name": last_name,
                "balance": balance,
            });
        }
    });


let txt = 'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ' + first_name + '\n–í–∞—à id: ' + chatId + '\n–í–∞—à –±–∞–ª–∞–Ω—Å: ' + balance +' –≥—Ä–Ω \n\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @firstobmen_support';
  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    
bot.sendMessage(chatId, txt,{
    reply_markup:{
        inline_keyboard: keyboard1
    }
});
   }); 


     getCrypto();
     getUAH();



bot.on('callback_query', (query) =>  {
    status = 0;
    const chatId = query.message.chat.id;
    
    
    if (query.data === 'back') {
    
    let txt = 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ' + f_name + '\n\n–í–∞—à id: ' + chatId + '\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ' + balance +' –≥—Ä–Ω \n\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @firstobmen_support';
  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    
bot.sendMessage(chatId, txt,{
    reply_markup:{
        inline_keyboard: keyboard1
    }
});
}
    if (query.data === 'obmen') { // –µ—Å–ª–∏ –∫–æ—Ç
        let date_ob = new Date();
   getCrypto();
     getUAH();
// current date
// adjust 0 before single digit date
let date = ("0" + date_ob.getDate()).slice(-2);

// current month
let month = ("0" + (date_ob.getMonth() + 1)).slice(-2);

// current year
let year = date_ob.getFullYear();

// current hours
let hours = date_ob.getHours();

// current minutes
let minutes = date_ob.getMinutes();

// current seconds
let seconds = date_ob.getSeconds();
        
console.log(usduah);
console.log(_coinList.LTC*usduah);
    let txt = '–î–∞—Ç–∞: ' + date + '-' + month + '-' + year + '|' + hours + ':' + minutes + '\n\n –ö—É—Ä—Å –≤–∞–ª—é—Ç: \n Litecoin(LTC): ' + Math.round((_coinList.LTC*1.4)*100)/100 + ' $   ' + Math.round((_coinList.LTC*usduah*1.4)*100)/100 + ' ‚Ç¥' + '\n Ripple(XRP): ' + Math.round((_coinList.XRP*1.4)*100)/100 + ' $   ' + Math.round((_coinList.XRP*usduah*1.4)*100)/100 + ' ‚Ç¥' + '\n Dogecoin(DOGE): ' + Math.round((_coinList.DOGE*1.4)*100)/100 + ' $   ' + Math.round((_coinList.DOGE*usduah*1.4)*100)/100 + ' ‚Ç¥'+ '\n Monero(XMR): ' + Math.round((_coinList.XMR*1.4)*100)/100 + ' $   ' + Math.round((_coinList.XMR*usduah*1.4)*100)/100 + ' ‚Ç¥';
        bot.sendMessage(chatId, txt, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
            reply_markup: {
                inline_keyboard: keyboard2
            }
        });
    }
    if (query.data === 'ltc'){ // –µ—Å–ª–∏ –∫–æ—Ç
    
    let txt = '–í–∞—à –∞–¥—Ä–µ—Å—Å LTC (Litecoin): LYY9byMYwSp7Acs9jkguwoB5FccWQKHeFY \n\n–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @firstobmen_support';

        //bot.sendMessage(chatId, txt);
         bot.sendMessage(chatId, txt, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
            reply_markup: {
                inline_keyboard: backkey
            }
        });
    }
    if (query.data === 'xrp'){ // –µ—Å–ª–∏ –∫–æ—Ç
    
    let txt = '–í–∞—à –∞–¥—Ä–µ—Å—Å XRP (Ripple): rBQzBBKE5EwJzGha6aoZtPwrG3EPRjCyJY\n–¢–µ–≥ –∞–¥—Ä–µ—Å—Å–∞: 100131\n\n–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @firstobmen_support';

        //bot.sendMessage(chatId, txt);
         bot.sendMessage(chatId, txt, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
            reply_markup: {
                inline_keyboard: backkey
            }
        });
    }
    if (query.data === 'doge'){ // –µ—Å–ª–∏ –∫–æ—Ç
    
    let txt = '–í–∞—à –∞–¥—Ä–µ—Å—Å DOGE (Dogecoin): DDZ5DvVZkyxuUL1VqLyKbMKatisdoGA5hL\n\n–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @firstobmen_support';

        //bot.sendMessage(chatId, txt);
         bot.sendMessage(chatId, txt, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
            reply_markup: {
                inline_keyboard: backkey
            }
        });
    }
    if (query.data === 'xmr'){ // –µ—Å–ª–∏ –∫–æ—Ç
    
    let txt = '–í–∞—à –∞–¥—Ä–µ—Å—Å XMR (Monero): 8AYfAEkFwKdeHL6Fm5Dv5FHMVcFEomEeNAd5sdkzPfg81SZMrQ8MCRPfumXBbpue3A95swpWkqgGZQAQh5WRxiiA1jBBApm\n\n–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @firstobmen_support';

        //\nC—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫: https://d-obmen.cc

        //bot.sendMessage(chatId, txt);
         bot.sendMessage(chatId, txt, { // –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫–ª–∞–≤—É
            reply_markup: {
                inline_keyboard: backkey
            }
        });
    }
    
    if (query.data === 'vyvod'){ // –µ—Å–ª–∏ –∫–æ—Ç
    
    let txt = '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –í—ã–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –≤–∞–ª—é—Ç–µ - UAH –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ\n –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ' + balance + ' –≥—Ä–Ω\n –î–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–æ–π –≤–∞–ª—é—Ç–µ:';
    //let txt1 = '–Ø —Å–µ–π—á–∞—Å –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è ';

        //bot.sendMessage(chatId, txt);
        status = 1;
         bot.sendMessage(chatId, txt);
        
               }

    if (query.data === 'card'){
        let txt1;
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É Visa/Mastercard: ');
        
        status = 2;
   
                         
                        
                    }
   
    
});
    